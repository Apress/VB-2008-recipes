Imports System
Imports System.Collections
Imports System.Windows.Forms
'  All designed code is stored in the autogenerated partial
'  class called Recipe09-10.Designer.vb.  You can see this
'  file by selecting "Show All Files" in solution explorer.
Partial Public Class Recipe09_10

    Private Sub listView1_ColumnClick(ByVal sender As Object, ByVal e As System.Windows.Forms.ColumnClickEventArgs) Handles listView1.ColumnClick

        '  Create and/or configure the ListViewItemComparer to sort based on
        '  the column that was clicked.
        Dim sorter As ListViewItemComparer = TryCast(listView1.ListViewItemSorter, ListViewItemComparer)

        If sorter Is Nothing Then
            '  Create a new ListViewItemComparer.
            sorter = New ListViewItemComparer(e.Column)

            '  Use Decimal comparison for the first column.
            If e.Column = 0 Then
                sorter.Numeric = True
            Else
                sorter.Numeric = False
            End If

            listView1.ListViewItemSorter = sorter
        Else
            '  Use Decimal comparison for the first column.
            If e.Column = 0 Then
                sorter.Numeric = True
            Else
                sorter.Numeric = False
            End If

            '  Configure the existing ListViewItemComparer.
            If sorter.Column = e.Column Then
                sorter.Descending = Not sorter.Descending
            Else
                sorter.Column = e.Column
                sorter.Descending = False
            End If
        End If

        '  Sort the ListView.
        listView1.Sort()

    End Sub

End Class
Public Class ListViewItemComparer
    Implements IComparer

    '  Private members to configure comparer logic.
    Private m_Column As Integer
    Private m_Numeric As Boolean = False
    Private m_Descending As Boolean = False

    '  Property to get/set the column to use for comparison.
    Public Property Column() As Integer
        Get
            Return m_Column
        End Get
        Set(ByVal value As Integer)
            m_Column = value
        End Set
    End Property
    '  Property to get/set whether numeric comparison is required
    '  as opposed to the standard alphabetic comparison.
    Public Property Numeric() As Boolean
        Get
            Return m_Numeric
        End Get
        Set(ByVal value As Boolean)
            m_Numeric = value
        End Set
    End Property
    '  Property to get/set whether we are sorting in descending
    '  order or not.
    Public Property Descending() As Boolean
        Get
            Return m_Descending
        End Get
        Set(ByVal Value As Boolean)
            m_Descending = Value
        End Set
    End Property
    Public Sub New(ByVal columnIndex As Integer)
        Column = columnIndex
    End Sub
    Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer Implements System.Collections.IComparer.Compare

        '  Convert the arguments to ListViewItem objects.
        Dim itemX As ListViewItem = TryCast(x, ListViewItem)
        Dim itemY As ListViewItem = TryCast(y, ListViewItem)

        '  Handle the logic for a nothing reference as dictated by the
        '  IComparer interface.  Nothing is considered less than
        '  any other value.
        If itemX Is Nothing And itemY Is Nothing Then
            Return 0
        ElseIf itemX Is Nothing Then
            Return -1
        ElseIf itemY Is Nothing Then
            Return 1
        End If

        '  Short-circuit condition where the items are references 
        '  to the same object.
        If itemX Is itemY Then Return 0

        '  Determine if numeric comparison is required.
        If Numeric Then
            '  Convert column text to numbers before comparing.
            '  If the conversion fails, just use the value0.
            Dim itemXVal, itemYVal As Decimal

            If Not Decimal.TryParse(itemX.SubItems(Column).Text, itemXVal) Then
                itemXVal = 0
            End If
            If Not Decimal.TryParse(itemY.SubItems(Column).Text, itemYVal) Then
                itemYVal = 0
            End If

            If Descending Then
                Return Decimal.Compare(itemYVal, itemXVal)
            Else
                Return Decimal.Compare(itemXVal, itemYVal)
            End If
        Else
            '  Keep the column text in its native string format
            '  and perform an alphabetic comparison.
            Dim itemXText As String = itemX.SubItems(Column).Text
            Dim itemYText As String = itemY.SubItems(Column).Text

            If Descending Then
                Return String.Compare(itemYText, itemXText)
            Else
                Return String.Compare(itemXText, itemYText)
            End If
        End If

    End Function

End Class

Imports System
Imports System.Windows.Forms
Imports System.Text.RegularExpressions
'  All designed code is stored in the autogenerated partial
'  class called Recipe09-16.Designer.vb.  You can see this
'  file by selecting "Show All Files" in solution explorer.
Partial Public Class Recipe09_16

    '  Button click event handler ensures the ErrorProvider is not
    '  reporting any error for each control before proceeding.
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click

        Dim errorText As String = String.Empty
        Dim invalidInput As Boolean = False

        For Each ctrl As Control In Me.Controls
            If Not errProvider.GetError(ctrl) = String.Empty Then
                errorText += "  * " & errProvider.GetError(ctrl) & ControlChars.NewLine
                invalidInput = True
            End If
        Next

        If invalidInput Then
            MessageBox.Show(String.Format("This form contains the following unresolved errors:{0}{0}{1}", ControlChars.NewLine, errorText, "Invalid Input", MessageBoxButtons.OK, MessageBoxIcon.Warning))
        Else
            Me.Close()
        End If

    End Sub
    '  When the TExtBox loses focus, check that the contents are a valid
    '  e-mail address.
    Private Sub txtEmail_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmail.Leave

        '  Create a regular expression to check for valid email addresses.
        Dim emailRegEx As Regex

        emailRegEx = New Regex("^[\w-]+@([\w]+\.)+[\w]+$")

        '  Validate the text from the control that raised the event.
        Dim ctrl As Control = DirectCast(sender, Control)

        If emailRegEx.IsMatch(ctrl.Text) Or ctrl.Text = String.Empty Then
            errProvider.SetError(ctrl, String.Empty)
        Else
            errProvider.SetError(ctrl, "This is not a valid email address.")
        End If

    End Sub

End Class